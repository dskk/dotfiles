[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'tell-k/vim-autopep8'
on_ft = ['python']

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = { 
    \   'colorscheme': 'tender'
    \}
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    " =======================================
    " Boost your productivity with EasyMotion
    " =======================================
    " Disable default mappings
    " If you are true vimmer, you should explicitly map keys by yourself.
    " Do not rely on default bidings.
    let g:EasyMotion_do_mapping = 0
    " =======================================
    " Find Motions
    " =======================================
    " Jump to anywhere you want by just `4` or `3` key strokes without thinking!
    " `m{char}{char}{target}`
    nmap m <Plug>(easymotion-s2)
    xmap m <Plug>(easymotion-s2)
    omap m <Plug>(easymotion-s2)
    " Of course, you can map to any key you want such as `<Space>`
    " map <Space>(easymotion-s2)
    " Turn on case sensitive feature
    let g:EasyMotion_smartcase = 1
    " =======================================
    " Line Motions
    " =======================================
    " `JK` Motions: Extend line motions
    map <S-j> <Plug>(easymotion-j)
    map <S-k> <Plug>(easymotion-k)
    " keep cursor column with `JK` motions
    let g:EasyMotion_startofline = 0
    " =======================================
    " General Configuration
    " =======================================
    let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
    " Show target key with upper case to improve readability
    let g:EasyMotion_use_upper = 1
    " Jump to first match with enter & space
    let g:EasyMotion_enter_jump_first = 1
    let g:EasyMotion_space_jump_first = 1
    " =======================================
    " Search Motions
    " =======================================
    " Extend search motions with vital-over command line interface
    " Incremental highlight of all the matches
    " Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
    " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
    " :h easymotion-command-line
    nmap / <Plug>(easymotion-sn)
    xmap / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)
    " f,tコマンドの置き換え
    map f <Plug>(easymotion-fl)
    map t <Plug>(easymotion-tl)
    map F <Plug>(easymotion-Fl)
    map T <Plug>(easymotion-Tl)
'''

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
if has("persistent_undo")
   " ファイルを閉じてもUndo記録を残す
    set undodir=$XDG_CONFIG_HOME/nvim/.cache/undodir
    set undofile
endif
let g:undotree_WindowLayout = 2         " undotreeは左側/diffは下にウィンドウ幅で表示
let g:undotree_ShortIndicators = 1      " 時間単位は短く表示
let g:undotree_SplitWidth = 30          " undotreeのウィンドウ幅
let g:undotree_SetFocusWhenToggle = 1   " undotreeを開いたらフォーカスする
"let g:undotree_DiffAutoOpen = 0         " diffウィンドウは起動時無効
let g:undotree_DiffpanelHeight = 8      " diffウィンドウの行数
"let g:undotree_HighlightChangedText = 0 " 変更箇所のハイライト無効
" undotreeをトグル表示
noremap <Leader>u :UndotreeToggle<CR>

" undotreeバッファ内でのキーバインド設定
function! g:Undotree_CustomMap()
    map <silent> <buffer> <Esc> q
    map <silent> <buffer> h ?
endfunction
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <Leader>f :<C-u>NERDTreeToggle<CR>
    let NERDTreeIgnore=['\.pyc$']
'''
